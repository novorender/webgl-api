[
["createProgram",0,{"shaders":{"vertex":"layout(location = 0) in vec4 pos0;\r\nlayout(location = 1) in vec4 pos1;\r\nlayout(location = 2) in vec4 pos2;\r\nlayout(location = 3) in vec4 color;\r\nuniform mat4 worldClipMatrix;\r\nout vec4 triangleColor;\r\n\r\nvoid main() {\r\n    vec4 pos;\r\n    switch(gl_VertexID) {\r\n        case 0:\r\n            pos = pos0;\r\n            break;\r\n        case 1:\r\n            // pos = (gl_InstanceID % 2 == 0) ? pos1 : pos2;\r\n            pos = pos1;\r\n            break;\r\n        case 2:\r\n            // pos = (gl_InstanceID % 2 == 0) ? pos2 : pos1;\r\n            pos = pos2;\r\n            break;\r\n    }\r\n    gl_Position = worldClipMatrix * pos;\r\n    triangleColor = color * 0.5;\r\n}\r\n","fragment":"in vec4 triangleColor;\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n    if(triangleColor.a == 0.)\r\n        discard;\r\n    // fragColor = vec4(1);\r\n    fragColor = triangleColor;\r\n}\r\n"}}],
["createProgram",1,{"shaders":{"vertex":"layout(location = 0) in vec4 pos0;\r\nlayout(location = 1) in vec4 pos1;\r\nlayout(location = 2) in vec4 pos2;\r\nlayout(location = 3) in vec4 color;\r\nlayout(location = 4) in highp int edgeMask;\r\n// const highp int edgeMask = 1;\r\n\r\nuniform mat4 worldClipMatrix;\r\nout vec4 triangleColor;\r\n\r\nvoid main() {\r\n    vec4 pos;\r\n    switch(gl_VertexID) {\r\n        case 5:\r\n        case 0:\r\n            pos = pos0;\r\n            break;\r\n        case 1:\r\n        case 2:\r\n            pos = pos1;\r\n            break;\r\n        case 3:\r\n        case 4:\r\n            pos = pos2;\r\n            break;\r\n    }\r\n    gl_Position = worldClipMatrix * pos;\r\n    triangleColor = (edgeMask & (1<<(gl_VertexID / 2))) != 0 ? vec4(1) : vec4(color.rgb, 0);\r\n}\r\n","fragment":"in vec4 triangleColor;\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n    if(triangleColor.a == 0.)\r\n        discard;\r\n    // fragColor = vec4(1);\r\n    fragColor = triangleColor;\r\n}\r\n"}}],
["createProgram",2,{"shaders":{"vertex":"layout(location = 0) in vec3 pos0;\r\nlayout(location = 1) in vec3 pos1;\r\nlayout(location = 2) in vec3 pos2;\r\nlayout(location = 3) in vec4 color;\r\nuniform mat4 worldClipMatrix;\r\nuniform vec4 outlinePlane; // in world space\r\nout vec4 triangleColor;\r\n\r\n// const vec4 outlinePlane = vec4(0, 0, 1, 0);\r\n\r\nstruct Vertex {\r\n    vec3 pos;\r\n    float depth;\r\n};\r\n\r\nstruct Line {\r\n    vec3 pos[2];\r\n};\r\n\r\nVertex projectVertex(vec3 pos, vec4 plane) {\r\n    float depth = dot(vec4(pos, 1), plane);\r\n    return Vertex(pos, depth);\r\n}\r\n\r\nvec3 intersectLineWithPlane(Vertex a, Vertex b) {\r\n    float t = -a.depth / (b.depth - a.depth);\r\n    return mix(a.pos, b.pos, t);\r\n}\r\n\r\nLine intersectTriangleWithPlane(Vertex a, Vertex b, Vertex c) {\r\n    vec3 p[2];\r\n    float sa = sign(a.depth);\r\n    float sb = sign(b.depth);\r\n    float sc = sign(c.depth);\r\n    if(sa != sb && sa != sc) {\r\n        p[1] = intersectLineWithPlane(a, b);\r\n        p[0] = intersectLineWithPlane(a, c);\r\n    } else if(sb != sc && sb != sa) {\r\n        p[1] = intersectLineWithPlane(b, c);\r\n        p[0] = intersectLineWithPlane(b, a);\r\n    } else if(sc != sa && sc != sb) {\r\n        p[0] = intersectLineWithPlane(c, a);\r\n        p[1] = intersectLineWithPlane(c, b);\r\n    } else {\r\n        p[0] = p[1] = vec3(0);\r\n    }\r\n    return Line(p);\r\n}\r\n\r\nvoid main() {\r\n    Vertex v0 = projectVertex(pos0, outlinePlane);\r\n    Vertex v1 = projectVertex(pos1, outlinePlane);\r\n    Vertex v2 = projectVertex(pos2, outlinePlane);\r\n    Line line = intersectTriangleWithPlane(v0, v1, v2);\r\n    vec3 pos = line.pos[gl_VertexID];\r\n    gl_Position = worldClipMatrix * vec4(pos, 1);\r\n    triangleColor = color;\r\n}\r\n","fragment":"in vec4 triangleColor;\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n    if(triangleColor.a == 0.)\r\n        discard;\r\n    // fragColor = vec4(1);\r\n    fragColor = triangleColor;\r\n}\r\n"}}],
["createBuffer",0,{"target":"ARRAY_BUFFER","srcData":{"base64":"////AQH/Af//Bv////8B/wEB/wP//wEB/wEBAQED//8BAQEB/wEBBv////8BAf8B/wb//////wH/AQEDAf//AQH/AQEBAwH//wEBAQH/AQb///8B/wH//wEG////Af//Af8BA/8B//8BAQEBAQP/Af8BAQEBAf8G"}}],
["createBuffer",1,{"target":"ARRAY_BUFFER","srcData":{"base64":"/wAA/wAAAP//AP//AP8AAP8A/wD//wD/AAD/AAD///8A//8A"}}],
["createVertexArray",0,{"attributes":[{"buffer":0,"numComponents":3,"offset":0,"componentType":"BYTE","normalized":false,"stride":10,"divisor":1},{"buffer":0,"numComponents":3,"offset":3,"componentType":"BYTE","normalized":false,"stride":10,"divisor":1},{"buffer":0,"numComponents":3,"offset":6,"componentType":"BYTE","normalized":false,"stride":10,"divisor":1},{"buffer":1,"numComponents":3,"offset":0,"componentType":"UNSIGNED_BYTE","normalized":true,"stride":3,"divisor":1},{"buffer":0,"numComponents":1,"offset":9,"componentType":"BYTE","shaderInteger":true,"stride":10,"divisor":1}]}],
["clear",{"color":[0,0,0,1]}],
["state",{"viewport":{"width":512,"height":512},"vertexArrayObject":0}],
["state",{"cullEnable":true,"vertexArrayObject":0,"program":0,"uniforms":[{"type":"Matrix4f","name":"worldClipMatrix","value":[3.200207233428955,-1.0861862897872925,-0.42434895038604736,-0.4242640733718872,0,3.0775279998779297,-0.5657985806465149,-0.5656854510307312,-1.9201242923736572,-1.8103106021881104,-0.7072482109069824,-0.7071067690849304,1.6573635333875982e-15,0,6.872462272644043,7.071067810058594]},{"type":"4f","name":"outlinePlane","value":[0.4242640733718872,0.5656854510307312,0.7071067690849304,0]}]}],
["draw",{"count":3,"mode":"TRIANGLES","instanceCount":12}],
["state",{"cullEnable":false,"vertexArrayObject":0,"program":1,"uniforms":[{"type":"Matrix4f","name":"worldClipMatrix","value":[3.200207233428955,-1.0861862897872925,-0.42434895038604736,-0.4242640733718872,0,3.0775279998779297,-0.5657985806465149,-0.5656854510307312,-1.9201242923736572,-1.8103106021881104,-0.7072482109069824,-0.7071067690849304,1.6573635333875982e-15,0,6.872462272644043,7.071067810058594]},{"type":"4f","name":"outlinePlane","value":[0.4242640733718872,0.5656854510307312,0.7071067690849304,0]}]}],
["draw",{"count":6,"mode":"LINES","instanceCount":12}],
["state",{"cullEnable":false,"vertexArrayObject":0,"program":2,"uniforms":[{"type":"Matrix4f","name":"worldClipMatrix","value":[3.200207233428955,-1.0861862897872925,-0.42434895038604736,-0.4242640733718872,0,3.0775279998779297,-0.5657985806465149,-0.5656854510307312,-1.9201242923736572,-1.8103106021881104,-0.7072482109069824,-0.7071067690849304,1.6573635333875982e-15,0,6.872462272644043,7.071067810058594]},{"type":"4f","name":"outlinePlane","value":[0.4242640733718872,0.5656854510307312,0.7071067690849304,0]}]}],
["draw",{"count":2,"mode":"LINES","instanceCount":12}],
["commit"]
]